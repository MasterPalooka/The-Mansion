Password Lock Code:
local side = "left"
local password = "123"
local opentime = 4
while true do
  term.clear()
  term.setCursorPos(1,1)
  write("Password: ")
  local input = read("#")
  if input == password then
    term.clear()
    term.setCursorPos(1,1)
    print("Buenos Dias")
    rs.setOutput(side,true)
    sleep(opentime)
    rs.setOutput(side,false)
  else  
    print("No Bueno")
    sleep(2)
  end
end

Light Switch Code:
local side = "right"
local userinput = ""
local event = ""
 
redstone.setOutput(side, false)
 
while true do
 
term.clear()
term.setCursorPos(1, 1)
print("To turn lamp on, press L.")
print("To exit, press any other key.")
 
event, userinput = os.pullEvent("char")
userinput = string.upper(userinput)
 
if userinput == "L" then
redstone.setOutput(side, true)
else
term.clear()
break
end
 
term.clear()
term.setCursorPos(1, 1)
print("To turn lamp off, press L.")
print("To exit, press any other key.")
 
event, userinput = os.pullEvent("char")
userinput = string.upper(userinput)
 
if userinput == "L" then
redstone.setOutput(side, false)
else
term.clear()
break
end
end

Defense Code:
term.setCursorPos(1,1)
term.clear()
print("Press O to turn on the program")
print("Hold Cont.+T to turn off the program")
event, userinput = os.pullEvent("char")
userinput = string.upper(userinput)
if userinput == "O" then
for i=1,64 do 
  rs.setOutput("back",true)
  sleep(0.7)
  rs.setOutput("back", false)
  sleep(0.7)
end
end

Perimeter Code:
x = 12
y = 29
a = 15
b = 15
c = 29
z = 5
m = 10

for n = 1, x do
turtle.digUp()
turtle.up()
end


turtle.turnRight()
turtle.forward()
turtle.forward()

    for n = 1, z do 

      turtle.turnRight()

      for n = 1, y do
      turtle.forward()
      end

      turtle.turnRight()

      for n = 1, a do
      turtle.forward()
      end

      turtle.turnRight()
    
      for n = 1, c do
      turtle.forward()
      end

      turtle.turnRight()

      for n = 1, b do
      turtle.forward()
      end


  end
 
 turtle.turnRight()
 turtle.turnRight()
 turtle.forward()
 turtle.forward()
 turtle.turnRight()
 turtle.down()
 turtle.down()
 turtle.placeUp()
 
 for n = 1, m do
   turtle.down()
 end
